// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ['/usr/lib/slepcdir/slepc3.12/x86_64-linux-gnu-rea
//                                  l/include', '/usr/lib/petscdir/petsc3.12/x86_64-li
//                                  nux-gnu-real/include', '/usr/lib/x86_64-linux-gnu/
//                                  openmpi/include', '/usr/lib/x86_64-linux-gnu/openm
//                                  pi/include/openmpi', '/usr/include/hdf5/openmpi', 
//                                  '/usr/include/eigen3', '/usr/lib/python3/dist-pack
//                                  ages/ffc/backends/ufc']
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_f8be833cafe634b6e0490c44a4a1328079268831.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise::ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise::~ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, false, false, true, false});
return enabled;
}

void ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 0
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           0
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights1[1] = { 0.5 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE5_C0_D01_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE5_C0_Q1[1][1][3] = { { { 0.3333333333333334, 0.3333333333333334, 0.3333333333333333 } } };
    // Unstructured piecewise computations
    double w3_m0 = 0.0;
    for (int ic = 0; ic < 3; ++ic)
        w3_m0 += w[3][ic] * FE5_C0_Q1[0][0][ic];
    const double co = cell_orientation == 1 ? -1.0 : 1.0;
    const double J_m0_c2 = coordinate_dofs[1] * FE5_C0_D01_Q1[0][0][0] + coordinate_dofs[4] * FE5_C0_D01_Q1[0][0][1];
    const double J_m0_c5 = coordinate_dofs[2] * FE5_C0_D01_Q1[0][0][0] + coordinate_dofs[8] * FE5_C0_D01_Q1[0][0][1];
    const double J_m0_c3 = coordinate_dofs[1] * FE5_C0_D01_Q1[0][0][0] + coordinate_dofs[7] * FE5_C0_D01_Q1[0][0][1];
    const double J_m0_c4 = coordinate_dofs[2] * FE5_C0_D01_Q1[0][0][0] + coordinate_dofs[5] * FE5_C0_D01_Q1[0][0][1];
    const double J_m0_c1 = coordinate_dofs[0] * FE5_C0_D01_Q1[0][0][0] + coordinate_dofs[6] * FE5_C0_D01_Q1[0][0][1];
    const double J_m0_c0 = coordinate_dofs[0] * FE5_C0_D01_Q1[0][0][0] + coordinate_dofs[3] * FE5_C0_D01_Q1[0][0][1];
    alignas(32) double sp[20];
    sp[0] = w3_m0 * w3_m0;
    sp[1] = 0.5 * w[0][0] * sp[0];
    sp[2] = J_m0_c2 * J_m0_c5;
    sp[3] = J_m0_c3 * J_m0_c4;
    sp[4] = sp[2] + -1 * sp[3];
    sp[5] = sp[4] * sp[4];
    sp[6] = J_m0_c1 * J_m0_c4;
    sp[7] = J_m0_c0 * J_m0_c5;
    sp[8] = sp[6] + -1 * sp[7];
    sp[9] = sp[8] * sp[8];
    sp[10] = sp[5] + sp[9];
    sp[11] = J_m0_c0 * J_m0_c3;
    sp[12] = J_m0_c1 * J_m0_c2;
    sp[13] = sp[11] + -1 * sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[10] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = co * sp[16];
    sp[18] = std::abs(sp[17]);
    sp[19] = sp[1] * sp[18];
    alignas(32) double BF0 = {};
    // Only 1 quadrature point, no loop
    {
        const double fw0 = sp[19] * weights1[0];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise()
{
  return new ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise();
}


ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise::ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise() : ufc::exterior_facet_integral()
{

}

ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise::~ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
}

void ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    std::size_t facet,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 3
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 3
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           3
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights2[2] = { 0.5, 0.5 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE2_C0_D01_F_Q2[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE2_C0_F_Q2[3][2][3] =
        { { { 0.0, 0.7886751345948129, 0.2113248654051871 },
            { 0.0, 0.2113248654051872, 0.7886751345948129 } },
          { { 0.7886751345948129, 0.0, 0.2113248654051871 },
            { 0.2113248654051872, 0.0, 0.7886751345948129 } },
          { { 0.7886751345948129, 0.2113248654051872, 0.0 },
            { 0.2113248654051872, 0.7886751345948129, 0.0 } } };
    // Unstructured piecewise computations
    const double J_m0_c0 = coordinate_dofs[0] * FE2_C0_D01_F_Q2[0][0][0] + coordinate_dofs[3] * FE2_C0_D01_F_Q2[0][0][1];
    const double J_m0_c1 = coordinate_dofs[0] * FE2_C0_D01_F_Q2[0][0][0] + coordinate_dofs[6] * FE2_C0_D01_F_Q2[0][0][1];
    const double J_m0_c2 = coordinate_dofs[1] * FE2_C0_D01_F_Q2[0][0][0] + coordinate_dofs[4] * FE2_C0_D01_F_Q2[0][0][1];
    const double J_m0_c3 = coordinate_dofs[1] * FE2_C0_D01_F_Q2[0][0][0] + coordinate_dofs[7] * FE2_C0_D01_F_Q2[0][0][1];
    const double J_m0_c4 = coordinate_dofs[2] * FE2_C0_D01_F_Q2[0][0][0] + coordinate_dofs[5] * FE2_C0_D01_F_Q2[0][0][1];
    const double J_m0_c5 = coordinate_dofs[2] * FE2_C0_D01_F_Q2[0][0][0] + coordinate_dofs[8] * FE2_C0_D01_F_Q2[0][0][1];
    alignas(32) double sp[15];
    sp[0] = J_m0_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[1] = J_m0_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[2] = sp[0] + sp[1];
    sp[3] = sp[2] * sp[2];
    sp[4] = triangle_reference_facet_jacobian[facet][0][0] * J_m0_c2;
    sp[5] = triangle_reference_facet_jacobian[facet][1][0] * J_m0_c3;
    sp[6] = sp[4] + sp[5];
    sp[7] = sp[6] * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = triangle_reference_facet_jacobian[facet][0][0] * J_m0_c4;
    sp[10] = triangle_reference_facet_jacobian[facet][1][0] * J_m0_c5;
    sp[11] = sp[9] + sp[10];
    sp[12] = sp[11] * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = std::sqrt(sp[13]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 2; ++iq)
    {
        // Quadrature loop body setup (num_points=2)
        // Unstructured varying computations for num_points=2
        double w3_r0_m0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_r0_m0 += w[3][ic] * FE2_C0_F_Q2[facet_0][iq][ic];
        double w3_r1_m0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_r1_m0 += w[3][ic + 3] * FE2_C0_F_Q2[facet_1][iq][ic];
        double w2_m0_c0 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_m0_c0 += w[2][ic] * FE2_C0_F_Q2[facet][iq][ic];
        double w2_m0_c1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_m0_c1 += w[2][ic + 3] * FE2_C0_F_Q2[facet][iq][ic];
        double w2_m0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_m0_c2 += w[2][ic + 6] * FE2_C0_F_Q2[facet][iq][ic];
        const double x_m0_c0 = coordinate_dofs[0] * FE2_C0_F_Q2[facet][iq][0] + coordinate_dofs[3] * FE2_C0_F_Q2[facet][iq][1] + coordinate_dofs[6] * FE2_C0_F_Q2[facet][iq][2];
        alignas(32) double sv2[13];
        sv2[0] = w3_r0_m0 + w3_r1_m0;
        sv2[1] = -1 * w3_r1_m0 + w3_r0_m0;
        sv2[2] = 0.5 * sv2[0] * std::pow(sv2[1], 2);
        sv2[3] = sv2[2] * (0.5 * w[0][0]);
        sv2[4] = w2_m0_c0 * w2_m0_c0;
        sv2[5] = w2_m0_c1 * w2_m0_c1;
        sv2[6] = sv2[4] + sv2[5];
        sv2[7] = w2_m0_c2 * w2_m0_c2;
        sv2[8] = sv2[6] + sv2[7];
        sv2[9] = (x_m0_c0 > 0.9999999999999997 ? 1 : w[1][0]) * w[4][0];
        sv2[10] = sv2[8] * sv2[9];
        sv2[11] = sv2[3] + sv2[10];
        sv2[12] = sv2[11] * sp[14];
        const double fw0 = sv2[12] * weights2[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}

extern "C" DLL_EXPORT ufc::exterior_facet_integral * create_ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise()
{
  return new ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise();
}


ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::~ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main()
{
    // Do nothing
}

const char * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::signature() const
{
    return "edd8aa36e2f701232ca3968c699f8cc5572f6be64f5c413247f987f43f8b341db576fe802c0b273c80238436c1c0451c67d0d093e1d713160ecf2f21ecd601e7";
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::rank() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::num_coefficients() const
{
    return 5;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
}

ufc::finite_element * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_3893c563eb9a59518bdaca7d6bbcd4f13320b65c_finite_element_main();
}

ufc::dofmap * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_3893c563eb9a59518bdaca7d6bbcd4f13320b65c_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_74de9105f381ea74dcd14a046879d17a815aece6_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_cea84afbb5a50c73ab8d3e35f2472dc16cf8ab24_finite_element_main();
    case 1:
        return create_ffc_element_cea84afbb5a50c73ab8d3e35f2472dc16cf8ab24_finite_element_main();
    case 2:
        return create_ffc_element_2bc572a872970471903740642e8195b32ad2fc36_finite_element_main();
    case 3:
        return create_ffc_element_fd1fb0e6bb5707e8dd40df830c02a772bdead3c7_finite_element_main();
    case 4:
        return create_ffc_element_cea84afbb5a50c73ab8d3e35f2472dc16cf8ab24_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_cea84afbb5a50c73ab8d3e35f2472dc16cf8ab24_dofmap_main();
    case 1:
        return create_ffc_element_cea84afbb5a50c73ab8d3e35f2472dc16cf8ab24_dofmap_main();
    case 2:
        return create_ffc_element_2bc572a872970471903740642e8195b32ad2fc36_dofmap_main();
    case 3:
        return create_ffc_element_fd1fb0e6bb5707e8dd40df830c02a772bdead3c7_dofmap_main();
    case 4:
        return create_ffc_element_cea84afbb5a50c73ab8d3e35f2472dc16cf8ab24_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_exterior_facet_integrals() const
{
    return true;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_cell_integral() const
{
    return create_ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_exterior_facet_integral() const
{
    return create_ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_exterior_facet_integral_main_otherwise();
}

ufc::interior_facet_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main()
{
  return new ffc_form_f8be833cafe634b6e0490c44a4a1328079268831_form_main();
}

